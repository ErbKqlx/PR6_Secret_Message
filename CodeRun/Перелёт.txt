import java.io.BufferedReader
import java.io.BufferedWriter
import java.io.InputStreamReader
import java.io.OutputStreamWriter
import kotlin.math.abs

/*
	Для чтения входных данных необходимо получить их
	из стандартного потока ввода (System.in).
	Данные во входном потоке соответствуют описанному
	в условии формату. Обычно входные данные состоят
	из нескольких строк. Можно использовать более производительные
	и удобные классы BufferedReader, BufferedWriter, Scanner, PrintWriter.

	С помощью BufferedReader можно прочитать из стандартного потока:
	* строку -- reader.readLine()
	* число -- val n = reader.readLine().toInt();
	* массив чисел известной длины (во входном потоке каждое число на новой строке) --
	val nums = arrayOfNulls<Int>(len)
	for (i in 0 until len) {
		nums[i] = reader.readLine().toInt()
	}

	* последовательность слов в строке --
	val parts = reader.readLine().split(" ")

	Чтобы вывести результат в стандартный поток вывода (System.out),
	Через BufferedWriter можно использовать методы
	writer.write("Строка"), writer.write('A') и writer.newLine().

	Возможное решение задачи "Вычислите сумму чисел в строке":
	var sum = 0
	val parts = reader.readLine().split(" ")
	for (i in 0 until parts.length) {
		val num = parts[i].toInt()
		sum += num
	}
	writer.write(sum.toString()) 
*/
fun main(args: Array<String>) {
	val reader = BufferedReader(InputStreamReader(System.`in`))
	val writer = BufferedWriter(OutputStreamWriter(System.out))


    val a = reader.readLine()
    val b = reader.readLine()
    val c = reader.readLine().toInt()

    writer.write(calcTime(a, b, c))
    
	reader.close()
	writer.close()
}

fun calcTime(x: String, y: String, z: Int): String {
    val time1 = x.split(":")
    val time2 = y.split(":")

    val resultTime = arrayOf(abs(time1[0].toInt() - time2[0].toInt()) - z, abs(time1[1].toInt() - time2[1].toInt()))
    //val resultTime = arrayOf(abs(time1[0].toInt() * 60 + time1[1] - time2[0].toInt() * 60 + time1[1]))
    
    //return "$resultTime[0]:$resultTime[1]"
    if (resultTime[1] < 10){
        return resultTime[0].toString() + ":0" + resultTime[1].toString()
    }
    else{
        return resultTime[0].toString() + ":" + resultTime[1].toString()
    }
    //return resultTime[0].toString()
}